name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # Use the Node.js version compatible with your project

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Debug the build directory
      - name: Debug build directory
        run: ls -R ./build

      # Step 6: Add CNAME file
      - name: Add CNAME file
        run: echo "${{ secrets.CUSTOM_DOMAIN }}" > ./build/CNAME

      # Step 7: Configure Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Step 8: Build with Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./build
          destination: ./_site

      # Step 9: Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      # Step 10: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
